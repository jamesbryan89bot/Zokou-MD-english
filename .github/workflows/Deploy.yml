const requestPairingCode = async (phoneNumber, pairKey) => {
Â  if (pairKey) {
Â Â Â  authState.creds.pairingCode = pairKey.toUpperCase();
Â  } else {
Â Â Â  authState.creds.pairingCode = (0, Utils_1.bytesToCrockford)((0, crypto_1.randomBytes)(5));
Â  }

Â  authState.creds.me = {
Â Â Â  id: (0, WABinary_1.jidEncode)(phoneNumber, 's.whatsapp.net'),
Â Â Â  name: '~'
Â  };

Â  ev.emit('creds.update', authState.creds);

Â  await sendNode({
Â Â Â  tag: 'iq',
Â Â Â  attrs: {
Â Â Â Â Â  to: WABinary_1.S_WHATSAPP_NET,
Â Â Â Â Â  type: 'set',
Â Â Â Â Â  id: generateMessageTag(),
Â Â Â Â Â  xmlns: 'md'
Â Â Â  },
Â Â Â  content: [
Â Â Â Â Â  {
Â Â Â Â Â Â Â  tag: 'link_code_companion_reg',
Â Â Â Â Â Â Â  attrs: {
Â Â Â Â Â Â Â Â Â  jid: authState.creds.me.id,
Â Â Â Â Â Â Â Â Â  stage: 'companion_hello',
Â Â Â Â Â Â Â Â Â  should_show_push_notification: 'true'
Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â  content: [
Â Â Â Â Â Â Â Â Â  {
Â Â Â Â Â Â Â Â Â Â Â  tag: 'link_code_pairing_wrapped_companion_ephemeral_pub',
Â Â Â Â Â Â Â Â Â Â Â  attrs: {},
Â Â Â Â Â Â Â Â Â Â Â  content: await generatePairingKey()
Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â  {
Â Â Â Â Â Â Â Â Â Â Â  tag: 'companion_server_auth_key_pub',
Â Â Â Â Â Â Â Â Â Â Â  attrs: {},
Â Â Â Â Â Â Â Â Â Â Â  content: authState.creds.noiseKey.public
Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â  {
Â Â Â Â Â Â Â Â Â Â Â  tag: 'companion_platform_id',
Â Â Â Â Â Â Â Â Â Â Â  attrs: {},
Â Â Â Â Â Â Â Â Â Â Â  content: Buffer.from([(0, Utils_1.getPlatformId)(browser[1])])
Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â  {
Â Â Â Â Â Â Â Â Â Â Â  tag: 'companion_platform_display',
Â Â Â Â Â Â Â Â Â Â Â  attrs: {},
Â Â Â Â Â Â Â Â Â Â Â  content: Buffer.from(`${browser[1]} (${browser[0]})`)
Â Â Â Â Â Â Â Â Â  },
Â Â Â Â Â Â Â Â Â  {
Â Â Â Â Â Â Â Â Â Â Â  tag: 'link_code_pairing_nonce',
Â Â Â Â Â Â Â Â Â Â Â  attrs: {},
Â Â Â Â Â Â Â Â Â Â Â  content: Buffer.from([0])
Â Â Â Â Â Â Â Â Â  }
Â Â Â Â Â Â Â  ]
Â Â Â Â Â  }
Â Â Â  ]
Â  });
Â  return authState.creds.pairingCode;
};
